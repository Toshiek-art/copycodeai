---
import BaseLayout from '../layouts/BaseLayout.astro';

// la chiave deve iniziare con PUBLIC_ per arrivare lato client
const turnstileSiteKey = import.meta.env.PUBLIC_TURNSTILE_SITE_KEY ?? '';
const turnstileEnabled = Boolean(turnstileSiteKey);
---
<BaseLayout title="Contact Me">
  {/* DEBUG: lasciami questo H1 per capire subito se rende */}
  <div class="container mx-auto px-4 py-16">
    <h1 class="text-4xl font-bold mb-6">Contact</h1>

    <form id="contact-form" class="max-w-2xl mx-auto space-y-6" data-turnstile-enabled={turnstileEnabled ? 'true' : 'false'}>
      <div id="form-result" class="hidden"></div>

      <div>
        <label for="name" class="block text-sm font-medium text-[var(--muted)]">Name</label>
        <input
          id="name"
          name="name"
          required
          class="mt-1 block w-full rounded-md border border-gray-300 bg-white text-[var(--text)] shadow-sm placeholder:text-[var(--muted)] focus:outline-none focus:ring-2 focus:ring-[var(--accent)] focus:ring-offset-0 dark:border-white/15 dark:bg-slate-900 dark:text-[var(--text)] dark:placeholder:text-[var(--muted)]"
        />
      </div>

      <div>
        <label for="email" class="block text-sm font-medium text-[var(--muted)]">Email</label>
        <input
          id="email"
          type="email"
          name="email"
          required
          class="mt-1 block w-full rounded-md border border-gray-300 bg-white text-[var(--text)] shadow-sm placeholder:text-[var(--muted)] focus:outline-none focus:ring-2 focus:ring-[var(--accent)] focus:ring-offset-0 dark:border-white/15 dark:bg-slate-900 dark:text-[var(--text)] dark:placeholder:text-[var(--muted)]"
        />
      </div>

      <div>
        <label for="message" class="block text-sm font-medium text-[var(--muted)]">Message</label>
        <textarea
          id="message"
          name="message"
          rows="4"
          required
          class="mt-1 block w-full rounded-md border border-gray-300 bg-white text-[var(--text)] shadow-sm placeholder:text-[var(--muted)] focus:outline-none focus:ring-2 focus:ring-[var(--accent)] focus:ring-offset-0 dark:border-white/15 dark:bg-slate-900 dark:text-[var(--text)] dark:placeholder:text-[var(--muted)]"
        ></textarea>
      </div>

      {/* Turnstile widget: se la key non c'è, mostra un hint ma NON crasha */}
      {turnstileEnabled
        ? <div class="cf-turnstile" data-sitekey={turnstileSiteKey}></div>
        : <p class="text-sm text-amber-600">PUBLIC_TURNSTILE_SITE_KEY mancante (solo dev hint)</p>}

      <button id="submit-btn" type="submit" class="bg-blue-600 text-white font-bold py-3 px-8 rounded-lg hover:bg-blue-700 transition-colors text-lg disabled:bg-gray-400">
        Send Message
      </button>
    </form>
  </div>

  {/* Script SOLIDO: parte solo quando il DOM è pronto, niente TS casts */}
  <script type="module">
    // carica Turnstile (non blocca render)
    const s = document.createElement('script');
    s.src = 'https://challenges.cloudflare.com/turnstile/v0/api.js';
    s.async = true; s.defer = true;
    document.head.appendChild(s);

    window.addEventListener('DOMContentLoaded', () => {
      const form = document.getElementById('contact-form');
      const formResult = document.getElementById('form-result');
      const submitBtn = document.getElementById('submit-btn');
      if (!form || !formResult || !submitBtn) return;

      const enableTurnstile = form.dataset.turnstileEnabled === 'true';

      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        submitBtn.disabled = true;
        submitBtn.textContent = 'Sending...';
        formResult.className = 'hidden';

        try {
          const fd = new FormData(form);

          if (enableTurnstile) {
            const existingToken = fd.get('cf-turnstile-response');
            if (!existingToken && window.turnstile) {
              const widget = form.querySelector('.cf-turnstile');
              if (widget && typeof window.turnstile.getResponse === 'function') {
                const resolved = window.turnstile.getResponse(widget);
                if (resolved) {
                  fd.set('cf-turnstile-response', resolved);
                }
              }
            }
          }

          const res = await fetch('/api/send-email', { method: 'POST', body: fd });
          const payload = await res.json().catch(() => ({}));
          console.log('[contact-form] response', { status: res.status, payload });

          if (res.ok && payload.ok) {
            formResult.className = 'p-4 mb-6 text-green-800 bg-green-100 border border-green-200 rounded-lg';
            const info = payload.id ? ' (id: ' + payload.id + ')' : '';
            formResult.textContent = 'Thank you! Your message has been sent successfully' + info + '.';
            form.reset();
          } else {
            const stage = payload.stage ? ' [stage: ' + payload.stage + ']' : '';
            const detail = payload.error ? payload.error + stage : 'Failed with status ' + res.status;
            throw new Error(detail);
          }
        } catch (err) {
          console.error('[contact-form] error', err);
          formResult.className = 'p-4 mb-6 text-red-800 bg-red-100 border border-red-200 rounded-lg';
          formResult.textContent = (err && err.message) || 'Something went wrong.';
        } finally {
          submitBtn.disabled = false;
          submitBtn.textContent = 'Send Message';
          if (enableTurnstile && window.turnstile && typeof window.turnstile.reset === 'function') {
            window.turnstile.reset();
          }
        }
      });
    });
  </script>
</BaseLayout>
